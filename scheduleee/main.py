import urllib.request
import requests
from bs4 import BeautifulSoup
from PIL import Image, ImageDraw, ImageFont
from io import BytesIO
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, ConversationHandler
import logging
import textwrap
import re
import json
import os
from groups_cleaned import GROUPS  # –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥—Ä—É–ø–ø–∞—Ö –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
from preps import PREPS
import asyncio
import urllib
import datetime

# ========== –ù–ê–°–¢–†–û–ô–ö–ò –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ==========
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# ========== –ö–û–ù–°–¢–ê–ù–¢–´ ==========
# –≤–µ—Ä—Ö–Ω—è—è - –æ—Å–Ω–æ–≤–Ω–∞—è, –Ω–∏–∂–Ω–∏–π —Ç–æ–∫–µ–Ω - —Ç–µ—Å—Ç–æ–≤—ã–π
# TOKEN = "7962333071:AAF0wlrEKS9MVbgym_Ws9erYUzucgjVG52w" 
TOKEN = "8039378791:AAE8p6naztH88Me9VsvX-5YlWCUQGUyP-8I"
WAITING_FOR_GROUP = 1  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ –≥—Ä—É–ø–ø—ã
WAITING_FOR_BROADCAST = 2  # –°–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
WAITING_FOR_TICKET = 3
WAITING_FOR_PREP = 4

reply_keyboard = [[KeyboardButton("–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ")]]
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
    'Accept-Language': 'ru-RU,ru;q=0.8,en-US;q=0.5,en;q=0.3',
    'Referer': 'https://coworking.tyuiu.ru/',
    "Connection": "keep-alive"
}

# –¶–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
COLORS = {
    'header_bg': (53, 122, 183),      # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –∑–∞–≥–æ–ª–æ–≤–∫–∞
    'first_col_bg': (217, 237, 247),  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –ø–µ—Ä–≤—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    'text': (0, 0, 0),                # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
    'border': (100, 100, 100),        # –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü
    'white': (255, 255, 255)          # –ë–µ–ª—ã–π —Ü–≤–µ—Ç
}

# –¶–≤–µ—Ç–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–∏–π
CLASS_COLORS = {
    'zamena': "#EEDA6C",              # –ó–∞–º–µ–Ω—ã - –∑–æ–ª–æ—Ç–æ–π
    'head_urok_session': "#DF9674FF",             # –°–µ—Å—Å–∏—è - —Ç–æ–º–∞—Ç–Ω—ã–π
    'event': '#FA8072',               # –ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è - —Å–≤–µ—Ç–ª–æ-–∫–æ—Ä–∞–ª–ª–æ–≤—ã–π
    'head_urok_praktik': '#c0d5fa',   # –ü—Ä–∞–∫—Ç–∏–∫–∞ - —Å–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π
    'gia': '#9370DB',                 # –ì–ò–ê - —Å—Ä–µ–¥–Ω–µ-—Ñ–∏–æ–ª–µ—Ç–æ–≤—ã–π
    'kanik': '#98FB98',               # –ö–∞–Ω–∏–∫—É–ª—ã - –±–ª–µ–¥–Ω–æ-–∑–µ–ª–µ–Ω—ã–π
    'head_urok_block': '#D3D3D3',     # –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥ - —Å–≤–µ—Ç–ª–æ-—Å–µ—Ä—ã–π
    'other_control': "#F77963FF",
    'zachet': "#F77963FF",
    'difzachet': "#E0573FFF",
    'consultation': "#F77963FF",
    'ekzamen': "#E0573FFF",
    't_urok_drob': "drob"

}

CLASS_COLORS_CONS = {
    'nechet': "#D5932F",
    'chet': "#3F8D2A"
}

CLASS_DESCRIPTIONS = {
    'zamena': '–∑–∞–º–µ–Ω—ã',
    'head_urok_session': '—Å–µ—Å—Å–∏—è',
    'event': '–ø—Ä–∞–∑–¥–Ω–∏—á–Ω—ã–µ –¥–Ω–∏',
    'head_urok_praktik': '–ø—Ä–∞–∫—Ç–∏–∫–∞',
    'gia': '–ì–ò–ê',
    'kanik': '–∫–∞–Ω–∏–∫—É–ª—ã',
    'head_urok_block': '–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–∏–æ–¥'
}

CLASS_DESCRIPTIONS_CONS = {
    'nechet': '–ù–µ—á—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è',
    'chet': '–ß—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è'
}

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
NESTED_TABLE_SETTINGS = {
    'show_borders': False,    # –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
    'padding': 0,             # –û—Ç—Å—Ç—É–ø –æ—Ç –∫—Ä–∞–µ–≤ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–π —è—á–µ–π–∫–∏
    'min_col_width': 70,      # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–∫–∏
    'font_size': 12,          # –†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞
    'line_spacing': 12,       # –ú–µ–∂—Å—Ç—Ä–æ—á–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
    'border_offset': 5,       # –û—Ç—Å—Ç—É–ø —Ç–µ–∫—Å—Ç–∞ –æ—Ç –≥—Ä–∞–Ω–∏—Ü
    'header_height': 65,      # –í—ã—Å–æ—Ç–∞ –∑–∞–≥–æ–ª–æ–≤–æ—á–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    'merge_lines': False       # –û–±—ä–µ–¥–∏–Ω—è—Ç—å —Å—Ç—Ä–æ–∫–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —è—á–µ–µ–∫
}

# ========== –ù–ê–°–¢–†–û–ô–ö–ò –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ==========
ADMIN_IDS = [1805861153]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à Telegram ID
BROADCAST_LIMIT = 10  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏

# ========== –î–û–ë–ê–í–õ–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê ==========
def is_admin(user_id):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id in ADMIN_IDS

async def get_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    
    chat_data = load_chat_data()
    
    # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    total_users = len([cid for cid in chat_data.keys() if not str(cid).startswith('-100')])
    total_groups = len([cid for cid in chat_data.keys() if str(cid).startswith('-100')])
    total_chats = total_users + total_groups
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —á–∞—Ç–æ–≤
    group_stats = {}
    for group_id in chat_data.values():
        group_stats[group_id] = group_stats.get(group_id, 0) + 1
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    message = (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n"
        f"üë§ –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
        f"üë• –í—Å–µ–≥–æ –≥—Ä—É–ø–ø/–∫–∞–Ω–∞–ª–æ–≤: {total_groups}\n"
        f"üí¨ –í—Å–µ–≥–æ —á–∞—Ç–æ–≤: {total_chats}\n\n"
        f"üìå –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ –≥—Ä—É–ø–ø–∞–º:\n"
    )
    
    for group_id, count in group_stats.items():
        group_name = next((g['name'] for g in GROUPS.values() if g['id'] == group_id), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞")
        message += f"  - {group_name}: {count} —á–∞—Ç(–æ–≤)\n"
    
    await update.message.reply_text(message)

async def broadcast_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É Markdown.\n"
        "–§–æ—Ä–º–∞—Ç: \n`—Ç–µ–∫—Å—Ç` - –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "`–≥—Ä—É–ø–ø—ã —Ç–µ–∫—Å—Ç` - –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–æ–≤\n"
        "`–≤—Å–µ —Ç–µ–∫—Å—Ç` - –¥–ª—è –≤—Å–µ—Ö —á–∞—Ç–æ–≤\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    return WAITING_FOR_BROADCAST

async def broadcast_receive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return ConversationHandler.END
    
    text = update.message.text.strip()
    
    if text.lower() == '/cancel':
        await update.message.reply_text("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return ConversationHandler.END
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏
    target = "all"
    message = text
    
    if text.startswith('–ª–∏—á–Ω—ã–µ '):
        target = "users"
        message = text[7:]
    elif text.startswith('–≥—Ä—É–ø–ø—ã '):
        target = "groups"
        message = text[7:]
    elif text.startswith('–≤—Å–µ '):
        target = "all"
        message = text[4:]
    
    chat_data = load_chat_data()
    
    if target == "users":
        chat_ids = [int(cid) for cid in chat_data.keys() if not str(cid).startswith('-100')]
    elif target == "groups":
        chat_ids = [int(cid) for cid in chat_data.keys() if str(cid).startswith('-100')]
    else:
        chat_ids = [int(cid) for cid in chat_data.keys()]
    
    total = len(chat_ids)
    success = 0
    failed = 0
    
    await update.message.reply_text(f"–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {total} —á–∞—Ç–æ–≤...")
    
    # –†–∞—Å—Å—ã–ª–∞–µ–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º —Å–∫–æ—Ä–æ—Å—Ç–∏
    for i, chat_id in enumerate(chat_ids):
        try:
            await context.bot.send_message(
                chat_id=chat_id,
                text=message,
                parse_mode="Markdown"
            )
            success += 1
            
            # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–∏ (–Ω–µ –±–æ–ª–µ–µ BROADCAST_LIMIT —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –º–∏–Ω—É—Ç—É)
            if (i + 1) % BROADCAST_LIMIT == 0:
                await asyncio.sleep(60)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ {chat_id}: {str(e)}")
            failed += 1
            continue
    
    await update.message.reply_text(
        f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success}\n"
        f"‚ùå –û—à–∏–±–æ–∫: {failed}"
    )
    
    return ConversationHandler.END

async def ticket_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞"""
    await update.message.reply_text(
        "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
    return WAITING_FOR_TICKET

async def ticket_receive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Ç–∏–∫–µ—Ç–∞"""
    user = update.effective_user
    chat_id = update.effective_chat.id
    if update.message.text == '/cancel':
        await update.message.reply_text(
        "–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
    )
        return ConversationHandler.END
    if update.message.photo:
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–æ—Ç–æ, —Å–æ—Ö—Ä–∞–Ω—è–µ–º file_id
        photo_id = update.message.photo[-1].file_id
        text = update.message.caption or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"
    else:
        photo_id = None
        text = update.message.text
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    admin_message = (
        f"üö® –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        f"üë§ ID: {user.id}\n"
        f"üìù –ò–º—è: {user.full_name}\n"
        f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ:\n{text}"
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
    for admin_id in ADMIN_IDS:
        try:
            if photo_id:
                await context.bot.send_photo(
                    chat_id=admin_id,
                    photo=photo_id,
                    caption=admin_message
                )
            else:
                await context.bot.send_message(
                    chat_id=admin_id,
                    text=admin_message
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–∏–∫–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
    
    await update.message.reply_text(
        "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å!"
    )
    
    return ConversationHandler.END

async def reply_to_ticket(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Ç–∏–∫–µ—Ç"""
    if not is_admin(update.effective_user.id):
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    if not context.args or len(context.args) < 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /reply [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [—Å–æ–æ–±—â–µ–Ω–∏–µ]\n"
            "–ü—Ä–∏–º–µ—Ä: /reply 1234567 –í–∞—à–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Ä–µ—à–µ–Ω–∞"
        )
        return
    
    user_id = context.args[0]
    message = ' '.join(context.args[1:])
    
    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚úâÔ∏è –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n{message}"
        )
        await update.message.reply_text("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {str(e)}")

# ========== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ï–ô ==========
def load_chat_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
    if os.path.exists('chat_data.json'):
        with open('chat_data.json', 'r') as f:
            return json.load(f)
    return {}

def save_chat_data(data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–∞—Ö –≤ —Ñ–∞–π–ª"""
    with open('chat_data.json', 'w') as f:
        json.dump(data, f)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–∞—Ö —á–∞—Ç–æ–≤
chat_groups = load_chat_data()

def get_chat_group(chat_id):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –≥—Ä—É–ø–ø–µ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞"""
    group_id = chat_groups.get(str(chat_id), 728)  # 728 - –≥—Ä—É–ø–ø–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    for group_data in GROUPS.values():
        if group_data['id'] == group_id:
            return group_data
    
def set_chat_group(chat_id, group_id):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥—Ä—É–ø–ø—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞"""
    for key, group_data in GROUPS.items():
        if group_data['id'] == group_id:
            chat_groups[str(chat_id)] = group_id
            save_chat_data(chat_groups)
            return

# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ==========
async def normalize_group_name(text):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ (—É–¥–∞–ª—è–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã)"""
    return re.sub(r'[^\w]', '', text).lower()

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω—è–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å —á–µ–≥–æ-–ª–∏–±–æ"""
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return ConversationHandler.END
# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ==========

async def change_group(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã"""
    chat_id = update.effective_chat.id
    if not context.args:
        await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã –≤ –ª—é–±–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä, –ö–°—Ç-22-(9)-1 –∏–ª–∏ –∫—Å—Ç2291\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
    )
        return WAITING_FOR_GROUP
    
    input_name = ' '.join(context.args)
    normalized = await normalize_group_name(input_name)
    
    selected = None
    for key, group in GROUPS.items():
        if key in normalized or normalized in key:
            selected = group
            break
    
    if selected:
        set_chat_group(chat_id, selected['id'])
        await update.message.reply_text(f"–ì—Ä—É–ø–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {selected['name']}")
    else:
        await update.message.reply_text("–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")

async def receive_group_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"""
    chat_id = update.effective_chat.id
    input_name = update.message.text.strip()
    
    if input_name.lower() == '/cancel':
        await update.message.reply_text("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≥—Ä—É–ø–ø—ã –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    
    normalized = await normalize_group_name(input_name)
    
    selected = None
    for key, group in GROUPS.items():
        if key in normalized or normalized in key:
            selected = group
            break
    
    if selected:
        set_chat_group(chat_id, selected['id'])
        await update.message.reply_text(f"–ì—Ä—É–ø–ø–∞ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {selected['name']}")
    else:
        await update.message.reply_text(
            "–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return WAITING_FOR_GROUP
    
    return ConversationHandler.END

async def prep_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    if not context.args:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–æ–¥–∞–Ω—á—É–∫ –∏–ª–∏ –û–ª—å–≥–∞ –ê–±–∞–π–¥—É–ª–∏–Ω–∞ –∏–ª–∏ –¢–∞—Ç—å—è–Ω–∞ –ú–∏—Ö–∞–π–ª–æ–≤–Ω–∞\n"
            "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return WAITING_FOR_PREP
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    temp_msg = await update.message.reply_text("–ò—â—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è...")
    
    # –ï—Å–ª–∏ –∏–º—è –ø—Ä–µ–ø–æ–¥–∞ –ø–µ—Ä–µ–¥–∞–Ω–æ —Å—Ä–∞–∑—É —Å –∫–æ–º–∞–Ω–¥–æ–π (/prep –ò–≤–∞–Ω–æ–≤)
    input_prep = ' '.join(context.args).lower()
    return await find_prep_and_show_schedule(update, context, input_prep, temp_msg)

async def prep_receive(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"""
    input_prep = update.message.text.strip().lower()
    
    if input_prep == '/cancel':
        await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ConversationHandler.END
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    temp_msg = await update.message.reply_text("–ò—â—É –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–∫–∞–∑–∞–Ω —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
    if 'found_preps' in context.user_data:
        try:
            selected_num = int(input_prep) - 1
            found_preps = context.user_data['found_preps']
            
            if 0 <= selected_num < len(found_preps):
                prep = found_preps[selected_num]
                prep_name = f"{prep['second_name']} {prep['first_name']} {prep['third_name']}"
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
                img = await get_schedule_image(update.effective_chat.id, action=str(prep['id']))
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                try:
                    await context.bot.delete_message(
                        chat_id=update.effective_chat.id,
                        message_id=temp_msg.message_id
                    )
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if img:
                    await context.bot.send_photo(
                        chat_id=update.effective_chat.id,
                        photo=img,
                        caption=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {prep_name}"
                    )
                else:
                    await context.bot.send_message(
                        chat_id=update.effective_chat.id,
                        text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
                    )
                
                del context.user_data['found_preps']
                return ConversationHandler.END
        except ValueError:
            pass
    
    # –ï—Å–ª–∏ –Ω–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞, –≤—ã–ø–æ–ª–Ω—è–µ–º –æ–±—ã—á–Ω—ã–π –ø–æ–∏—Å–∫
    return await find_prep_and_show_schedule(update, context, input_prep, temp_msg)

async def find_prep_and_show_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE, 
                                     search_query: str, temp_msg=None):
    """–ò—â–µ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    search_parts = search_query.split()
    found_preps = []
    
    for prep in PREPS:
        full_name = f"{prep['second_name']} {prep['first_name']} {prep['third_name']}".lower()
        match = all(part in full_name for part in search_parts)
        
        if match:
            found_preps.append(prep)
    
    if not found_preps:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –æ—à–∏–±–∫–∏
        if temp_msg:
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=temp_msg.message_id
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–µ –§–ò–û.\n"
                 "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã."
        )
        return WAITING_FOR_PREP
    
    if len(found_preps) > 1:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–ø–∏—Å–∫–∞
        if temp_msg:
            try:
                await context.bot.delete_message(
                    chat_id=update.effective_chat.id,
                    message_id=temp_msg.message_id
                )
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        
        prep_list = "\n".join(
            f"{i+1}. {prep['second_name']} {prep['first_name']} {prep['third_name']}"
            for i, prep in enumerate(found_preps)
        )
        
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=f"–ù–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:\n{prep_list}\n"
                 "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∏–∑ —Å–ø–∏—Å–∫–∞."
        )
        
        context.user_data['found_preps'] = found_preps
        return WAITING_FOR_PREP
    
    # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
    prep = found_preps[0]
    prep_name = f"{prep['second_name']} {prep['first_name']} {prep['third_name']}"
    
    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if temp_msg:
        try:
            await context.bot.delete_message(
                chat_id=update.effective_chat.id,
                message_id=temp_msg.message_id
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    img = await get_schedule_image(update.effective_chat.id, action=str(prep['id']))
    if img:
        await context.bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=img,
            caption=f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {prep_name}",
            reply_markup=markup
        )
    else:
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
        )
    
    return ConversationHandler.END

async def get_schedule_image(chat_id, action='group', cons_sched=False):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞"""
    if action and action.isdigit():
            def get_schedule_json(teacher_id: int, date: datetime.date, week_type: int = 1):
                timestamp = int(datetime.datetime.combine(date, datetime.time.min).timestamp())
                params = {
                    'task': 'get_urok',
                    'format': 'row',
                    'p': teacher_id,
                    'c': week_type,
                    'r': timestamp
                }
                response = requests.get(
                    'https://coworking.tyuiu.ru/shs/all_t/Model.php',
                    params=params,
                    headers={
                        'User-Agent': 'Mozilla/5.0',
                        'Referer': 'https://coworking.tyuiu.ru/shs/',
                    }
                )
                return response.json()


            # üì• –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π HTML
            url = f'https://coworking.tyuiu.ru/shs/all_t/sh.php?action=prep&prep={action}&vr=1&count=6' \
                  '&shed[0]=28708&union[0]=0&year[0]=2025' \
                  '&shed[1]=28710&union[1]=0&year[1]=2025' \
                  '&shed[2]=28711&union[2]=0&year[2]=2025' \
                  '&shed[3]=28714&union[3]=0&year[3]=2025' \
                  '&shed[4]=28713&union[4]=0&year[4]=2025' \
                  '&shed[5]=28709&union[5]=0&year[5]=2025'

            req = urllib.request.Request(
                url,
                headers={
                    "User-Agent": "Mozilla/5.0",
                    "Referer": "https://coworking.tyuiu.ru/shs/"
                }
            )

            with urllib.request.urlopen(req) as response_:
                html = response_.read().decode('cp1251')

            soup = BeautifulSoup(html, 'html.parser')

            # üß† –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
            start_date = datetime.date.today()
            teacher_id = action
            week_type = 0

            for day_offset in range(8):  # 6 –¥–Ω–µ–π –≤ –Ω–µ–¥–µ–ª–µ
                date = start_date + datetime.timedelta(days=day_offset)
                if date.weekday() == 6:
                    continue
                data = get_schedule_json(teacher_id, date, week_type)

                for para_num, urok_data in data.items():
                    if not urok_data[1]:  # –ü—É—Å—Ç–æ ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                        continue
                    
                    cell_id = f'ur{para_num}{date.day}{date.month}'  # –ü—Ä–∏–º–µ—Ä: ur3236
                    cell = soup.find(id=cell_id)
                    if not cell:
                        continue
                    
                    if urok_data[0] == 'urok':
                        table_html = f"<table class='comm3 {urok_data[4]}'><tr><td><div class='disc'>{urok_data[1]}</div><div class='grupp'>{urok_data[2]}</div></td><td class='cabs'><div class='cab'>{urok_data[3]}</          div></td></tr></table>"
                    elif urok_data[0] == 'ekz':
                        table_html = f"<table class='comm3 {urok_data[4]}'><tr><td class='head_ekz'>{urok_data[1]}</td><td rowspan=2 class='cabs'><div class='cab'>{urok_data[3]}</div></td></          tr><tr><td><div class='disc'>{urok_data[2]}</div></td></tr></table>"
                    else:
                        table_html = ''

                    cell.clear()
                    cell.append(BeautifulSoup(table_html, 'html.parser'))

    else:
        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥—Ä—É–ø–ø
        group_data = get_chat_group(chat_id)
        params = {
            'action': 'group',
            'union': 0,
            'sid': group_data['sid'],
            'gr': group_data['id'],
            'year': 2025,
            'vr': 0 if cons_sched else 1
        }
        response = requests.get(
            "https://coworking.tyuiu.ru/shs/all_t/sh.php",
            params=params,
            headers=HEADERS
        )
        
        if cons_sched:
            pattern = r'(</table>)(?!\s*</td>)'
            replacement = r'\1</td>'
            fixed_html = re.sub(pattern, replacement, response.text, flags=re.IGNORECASE)
            soup = BeautifulSoup(fixed_html, 'html.parser')
        else:
            soup = BeautifulSoup(response.text, 'html.parser')
    
    try:
        # –ü–∞—Ä—Å–∏–Ω–≥ HTML
        
        header_div = soup.find(lambda tag: tag.name == 'div' and 
                      ("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –≥—Ä—É–ø–ø—ã" in tag.text or 
                       "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è" in tag.text or 
                       "–ë–∞–∑–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã" in tag.text))

        header_text = ""
        if header_div:
            if "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –≥—Ä—É–ø–ø—ã" in header_div.text:
                header_text = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –≥—Ä—É–ø–ø—ã"
            elif "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è" in header_div.text:
                header_text = "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è"
            elif "–ë–∞–∑–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã" in header_div.text:
                header_text = "–ë–∞–∑–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã"

            if header_div.find('b'):
                header_text += f" {header_div.find('b').get_text(strip=True)}"
        main_table = soup.find('table')
        
        if not main_table:
            return None

        # –ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤
        try:
            font_bold = ImageFont.truetype("arialbd.ttf", 14)
            font_regular = ImageFont.truetype("arial.ttf", 12)
            font_header = ImageFont.truetype("arialbd.ttf", 16)
            font_first_line = ImageFont.truetype("arialbd.ttf", 18)
            font_small = ImageFont.truetype("arial.ttf", NESTED_TABLE_SETTINGS['font_size'])
        except:
            font_bold = font_regular = font_header = font_small = ImageFont.load_default()

        def format_header(text):
            """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ (–∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞—Ç—É, –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –∏ —á–µ—Ç–Ω–æ—Å—Ç—å)"""
            date_match = re.search(r'\d{1,2}\.\d{1,2}\.\d{4}', text)
            day_match = re.search(r'(–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫|–í—Ç–æ—Ä–Ω–∏–∫|–°—Ä–µ–¥–∞|–ß–µ—Ç–≤–µ—Ä–≥|–ü—è—Ç–Ω–∏—Ü–∞|–°—É–±–±–æ—Ç–∞|–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)', text)
            parity_match = re.search(r'(–ß–µ—Ç–Ω–∞—è|–ù–µ—á–µ—Ç–Ω–∞—è)', text)
            
            parts = []
            if date_match:
                parts.append(date_match.group(0))
            if day_match:
                parts.append(day_match.group(0))
            if parity_match:
                parts.append(parity_match.group(0))
            return '\n'.join(parts) if parts else text

        def calculate_table_size(table, level=0, parent_width=None):
            """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞–∑–º–µ—Ä—ã —Ç–∞–±–ª–∏—Ü—ã –∏ –µ–µ —Å—Ç–æ–ª–±—Ü–æ–≤/—Å—Ç—Ä–æ–∫"""
            rows = table.find_all('tr', recursive=False)
            if not rows:
                return (0, 0, [], [])

            num_cols = max(len(row.find_all(['th', 'td'], recursive=False)) for row in rows)
            
            if level == 0:
                # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—ã—Å–æ—Ç—É –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏
                row_heights = [NESTED_TABLE_SETTINGS['header_height']] + [40] * (len(rows)-1)
                col_widths = [40, 100] + [150] * (num_cols - 2)
            else:
                padding = NESTED_TABLE_SETTINGS['padding']
                available_width = parent_width - 2 * padding if parent_width else 100
                col_width = max(NESTED_TABLE_SETTINGS['min_col_width'], available_width // num_cols)
                col_widths = [col_width] * num_cols
                row_heights = [20] * (len(rows)+1)

            for i, row in enumerate(rows):
                cells = row.find_all(['th', 'td'], recursive=False)
                
                for j, cell in enumerate(cells[:num_cols]):
                    text = cell.get_text(" ", strip=True)
                    
                    if level == 0 and i == 0:
                        text = format_header(text)
                    
                    nested_tables = cell.find_all('table', recursive=False)
                    if nested_tables:
                        nested_height = sum(
                            calculate_table_size(t, level+1, col_widths[j])[1] 
                            + NESTED_TABLE_SETTINGS['padding'] 
                            for t in nested_tables
                        )
                        row_heights[i] = max(row_heights[i], nested_height)
                    else:
                        lines = textwrap.wrap(text, width=40 if level > 0 else 20)
                        line_height = 30 if level > 0 else 20
                        row_heights[i] = max(
                            row_heights[i], 
                            len(lines) * line_height + 15 + NESTED_TABLE_SETTINGS['border_offset']
                        )
            
            return (sum(col_widths), sum(row_heights), col_widths, row_heights)

        def get_cell_color(cell, level, cell_index=None):
            """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç —è—á–µ–π–∫–∏ —Å —É—á–µ—Ç–æ–º –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –∏ –ø–æ–∑–∏—Ü–∏–∏"""
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª–∞—Å—Å—ã —Å–∞–º–æ–π —è—á–µ–π–∫–∏ –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
            cell_classes = cell.get('class', [])
            for class_name, color in CLASS_COLORS.items():
                if class_name in cell_classes:
                    return color

            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –≤–Ω—É—Ç—Ä–∏ —è—á–µ–π–∫–∏
            nested_tables = cell.find_all('table', recursive=False)
            for table in nested_tables:
                table_classes = table.get('class', [])
                    
                for class_name, color in CLASS_COLORS.items():
                    if class_name in table_classes:
                        return color

            # 3. –î–ª—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é —Ç–∞–±–ª–∏—Ü—É
            if level > 0:
                parent_table = cell.find_parent('table')
                if parent_table:
                    parent_classes = parent_table.get('class', [])
                    for class_name, color in CLASS_COLORS.items():
                        if class_name in parent_classes:
                            return color

            # 4. –¶–≤–µ—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if level == 0:
                # –î–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —è—á–µ–µ–∫ —É—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é (–ø–µ—Ä–≤—ã–µ –¥–≤–∞ —Å—Ç–æ–ª–±—Ü–∞)
                if cell_index is not None and cell_index in (0, 1):
                    return COLORS['first_col_bg']
            return COLORS['white']

        def draw_table(draw, x, y, table, col_widths, row_heights, level=0, parent_width=None, cons_sch=False):
            """–†–∏—Å—É–µ—Ç —Ç–∞–±–ª–∏—Ü—É –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —à—Ä–∏—Ñ—Ç–∞–º–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"""
            # –î–æ–±–∞–≤–ª—è–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω (–∫—Ä—É–ø–Ω–µ–µ –æ–±—ã—á–Ω–æ–≥–æ)
            font_disc = ImageFont.truetype("arial.ttf", size=font_bold.size)
            
            # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –æ—Ç—Å—Ç—É–ø–æ–≤ –∏ –º–µ–∂—Å—Ç—Ä–æ—á–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞
            PADDING = 4
            LINE_SPACING = 2

            rows = table.find_all('tr', recursive=False)
            current_y = y

            for i, row in enumerate(rows):
                current_x = x
                cells = row.find_all(['th', 'td'], recursive=False)
                
                for j, cell in enumerate(cells[:len(col_widths)]):
                    cell_width = col_widths[j]
                    cell_height = row_heights[i]
                    text = cell.get_text(" ", strip=True)
                    
                    # –û–°–û–ë–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–õ–Ø –ü–ï–†–í–û–ô –°–¢–†–û–ö–ò –û–°–ù–û–í–ù–û–ô –¢–ê–ë–õ–ò–¶–´
                    if level == 0 and i == 0:
                        text = format_header(text)
                        font = font_first_line
                        
                        text_color = COLORS['white']
                        bg_color = COLORS['header_bg']
                        
                        # –†–∏—Å—É–µ–º —Ñ–æ–Ω —è—á–µ–π–∫–∏
                        draw.rectangle(
                            [current_x, current_y, current_x + cell_width, current_y + cell_height],
                            fill=bg_color,
                            outline=COLORS['border']
                        )
                        
                        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º
                        lines = text.split('\n')
                        # –ü–æ–ª—É—á–∞–µ–º –≤—ã—Å–æ—Ç—É —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ bbox
                        bbox = draw.textbbox((0, 0), "A", font=font)
                        line_height = (bbox[3] - bbox[1]) + LINE_SPACING
                        text_height = len(lines) * line_height
                        start_y = current_y + (cell_height - text_height) // 2
                        
                        for k, line in enumerate(lines):
                            text_width = font.getlength(line)
                            text_x = current_x + (cell_width - text_width) // 2
                            text_y = start_y + k * line_height
                            draw.text((text_x, text_y), line, fill=text_color, font=font)
                        
                        current_x += cell_width
                        continue
                    
                    # –û–ë–´–ß–ù–´–ï –Ø–ß–ï–ô–ö–ò
                    bg_color = get_cell_color(cell, level, j)
                    if bg_color == 'drob':
                        bg_color = "#D5932F"
                    # –†–∏—Å—É–µ–º —Ñ–æ–Ω –¥–ª—è —è—á–µ–µ–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —É—Ä–æ–≤–Ω—è
                    if level == 0:
                        draw.rectangle(
                            [current_x, current_y, current_x + cell_width, current_y + cell_height],
                            fill=bg_color,
                            outline=COLORS['border']
                        )
                        if bg_color == "#D5932F":
                            draw.rectangle(
                            [current_x, current_y + cell_height / 2, current_x + cell_width, current_y + cell_height],
                            fill="#3F8D2A",
                            outline=COLORS['border']
                            )
                            
                            # text_width = font.getlength('–ù–µ—á—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è')
                            # text_x = current_x + (cell_width - text_width) // 2
                            # draw.text((text_x, current_y + cell_height / 2 - 15), '–ù–µ—á—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è', fill=text_color, font=font)
                            # text_width = font.getlength('–ß—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è')
                            # text_x = current_x + (cell_width - text_width) // 2
                            # draw.text((text_x, current_y + cell_height / 2 + 2), '–ß—ë—Ç–Ω–∞—è –Ω–µ–¥–µ–ª—è', fill=text_color, font=font)

                    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
                    nested_tables = cell.find_all('table', recursive=False)
                    if nested_tables:
                        formatted_lines = []
                        line_types = []
                        line_fonts = []
        
                        for nested_table in nested_tables:
                            rows = nested_table.find_all('tr', recursive=False)
                            row_data = [None] * 4
                            
                            if cons_sch and len(rows)==2:
                                row_data = [None] * 6
                                disc = rows[0].find('div', class_='disc')
                                prep = rows[0].find('div', class_='prep')
                                cab = rows[0].find('div', class_='cab')
                                
                                disc2 = rows[1].find('div', class_='disc')
                                prep2 = rows[1].find('div', class_='prep')
                                cab2 = rows[1].find('div', class_='cab')

                                row_data[0] = disc.get_text(strip=True) if disc else None
                                row_data[1] = prep.get_text(strip=True) if prep else None
                                row_data[2] = cab.get_text(strip=True) if cab else None

                                row_data[3] = disc2.get_text(strip=True) if disc2 else None
                                row_data[4] = prep2.get_text(strip=True) if prep2 else None
                                row_data[5] = cab2.get_text(strip=True) if cab2 else None

                                if row_data[0]: 
                                    formatted_lines.append(row_data[0])
                                    line_types.append('top')
                                    line_fonts.append(font_disc)
                                if row_data[1]: 
                                    formatted_lines.append(row_data[1])
                                    line_types.append('top')
                                    line_fonts.append(font_regular)
                                if row_data[2]: 
                                    formatted_lines.append(row_data[2])
                                    line_types.append('top')
                                    line_fonts.append(font_regular)

                                if row_data[3]: 
                                    
                                    formatted_lines.append(row_data[3])
                                    line_types.append('bottom')
                                    line_fonts.append(font_disc)
                                if row_data[4]: 
                                    formatted_lines.append(row_data[4])
                                    line_types.append('bottom')
                                    line_fonts.append(font_regular)
                                if row_data[5]: 
                                    formatted_lines.append(row_data[5])
                                    line_types.append('bottom')
                                    line_fonts.append(font_regular)

                            elif len(rows) == 1:
                                disc = rows[0].find('div', class_='disc')
                                prep = rows[0].find('div', class_='prep')
                                if prep == None:
                                    prep = rows[0].find('div', class_='grupp')
                                cab = rows[0].find('div', class_='cab')
                                
                                row_data[0] = disc.get_text(strip=True) if disc else None
                                row_data[1] = prep.get_text(strip=True) if prep else None
                                row_data[2] = cab.get_text(strip=True) if cab else None
                                
                                if row_data[0]: 
                                    formatted_lines.append(row_data[0])
                                    line_types.append('top')
                                    line_fonts.append(font_disc)
                                if row_data[1]: 
                                    formatted_lines.append(row_data[1])
                                    line_types.append('bottom')
                                    line_fonts.append(font_regular)
                                if row_data[2]: 
                                    formatted_lines.append(row_data[2])
                                    line_types.append('bottom')
                                    line_fonts.append(font_regular)
                                    
                            elif len(rows) == 2:
                                first_td = rows[0].find('td')
                                row_data[0] = first_td.get_text(strip=True) if first_td else None
                                if row_data[0] and '–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π' in row_data[0]:
                                    row_data[0] = row_data[0].replace('–î–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π', '–î–∏—Ñ.')
                                cab = rows[0].find('div', class_='cab')
                                row_data[3] = cab.get_text(strip=True) if cab else None
                                
                                disc = rows[1].find('div', class_='disc')
                                prep = rows[1].find('div', class_='prep')
                                row_data[1] = disc.get_text(strip=True) if disc else None
                                row_data[2] = prep.get_text(strip=True) if prep else None
                                
                                if row_data[0]: 
                                    formatted_lines.append(row_data[0])
                                    line_types.append('top')
                                    line_fonts.append(font_regular)
                                if row_data[1]: 
                                    formatted_lines.append(row_data[1])
                                    line_types.append('top')
                                    line_fonts.append(font_disc)
                                if row_data[2]: 
                                    formatted_lines.append(row_data[2])
                                    line_types.append('bottom')
                                    line_fonts.append(font_regular)
                                if row_data[3]: 
                                    formatted_lines.append(row_data[3])
                                    line_types.append('bottom')
                                    line_fonts.append(font_regular)
                        
                        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ —Å –ø–µ—Ä–µ–Ω–æ—Å–æ–º –ø–æ —Å–ª–æ–≤–∞–º
                        wrapped_lines = []
                        wrapped_line_types = []
                        wrapped_line_fonts = []
                        max_line_width = cell_width - 2 * PADDING
                        
                        for line, line_type, line_font in zip(formatted_lines, line_types, line_fonts):
                            words = re.split(r'[\s-]+', line)
                            current_line = ""
                            
                            for word in words:
                                test_line = f"{current_line} {word}".strip()
                                if line_font.getlength(test_line) <= max_line_width:
                                    current_line = test_line
                                else:
                                    if current_line:
                                        wrapped_lines.append(current_line)
                                        wrapped_line_types.append(line_type)
                                        wrapped_line_fonts.append(line_font)
                                    current_line = word
                            
                            if current_line:
                                wrapped_lines.append(current_line)
                                wrapped_line_types.append(line_type)
                                wrapped_line_fonts.append(line_font)
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –≤—ã—Å–æ—Ç—É —Ç–µ–∫—Å—Ç–∞
                        top_lines = [(line, font) for line, typ, font in zip(wrapped_lines, wrapped_line_types, wrapped_line_fonts) if typ == 'top']
                        bottom_lines = [(line, font) for line, typ, font in zip(wrapped_lines, wrapped_line_types, wrapped_line_fonts) if typ == 'bottom']
                        
                        # –í—ã—á–∏—Å–ª—è–µ–º –≤—ã—Å–æ—Ç—É –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π –∏ –Ω–∏–∂–Ω–µ–π –≥—Ä—É–ø–ø
                        top_height = 0
                        for line, font in top_lines:
                            bbox = draw.textbbox((0, 0), line, font=font)
                            line_height = (bbox[3] - bbox[1]) + LINE_SPACING
                            top_height += line_height
                        
                        bottom_height = 0
                        for line, font in bottom_lines:
                            bbox = draw.textbbox((0, 0), line, font=font)
                            line_height = (bbox[3] - bbox[1]) + LINE_SPACING
                            bottom_height += line_height
                        
                        # –†–∏—Å—É–µ–º –≤–µ—Ä—Ö–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ (–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –≤–µ—Ä—Ö—É)
                        current_y_top = current_y + PADDING
                        for line, font in top_lines:
                            bbox = draw.textbbox((0, 0), line, font=font)
                            line_height = (bbox[3] - bbox[1]) + LINE_SPACING
                            text_width = font.getlength(line)
                            text_x = current_x + (cell_width - text_width) // 2
                            text_x = max(
                                current_x + PADDING,
                                min(text_x, current_x + cell_width - text_width - PADDING)
                            )
                            draw.text((text_x, current_y_top), line, fill=COLORS['text'], font=font)
                            current_y_top += line_height
                        
                        # –†–∏—Å—É–µ–º –Ω–∏–∂–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ (–≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –ø–æ –Ω–∏–∑—É)
                        current_y_bottom = current_y + cell_height - bottom_height - PADDING
                        for line, font in bottom_lines:
                            bbox = draw.textbbox((0, 0), line, font=font)
                            line_height = (bbox[3] - bbox[1]) + LINE_SPACING
                            text_width = font.getlength(line)
                            text_x = current_x + (cell_width - text_width) // 2
                            text_x = max(
                                current_x + PADDING,
                                min(text_x, current_x + cell_width - text_width - PADDING)
                            )
                            draw.text((text_x, current_y_bottom), line, fill=COLORS['text'], font=font)
                            current_y_bottom += line_height
                    
                    else:
                        # –û–±—ã—á–Ω–∞—è —è—á–µ–π–∫–∞ (–Ω–µ –≤–ª–æ–∂–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞)
                        font = font_bold if (level == 0 and (i == 0 or cell.name == 'th')) else font_regular
                        text_color = COLORS['white'] if (level == 0 and (i == 0 or cell.name == 'th')) else COLORS['text']
                        
                        # –ü–µ—Ä–µ–Ω–æ—Å —Ç–µ–∫—Å—Ç–∞ —Å —É—á–µ—Ç–æ–º —à–∏—Ä–∏–Ω—ã —è—á–µ–π–∫–∏
                        max_line_width = cell_width - 2 * PADDING
                        lines = []
                        if level == 0 and i == 0:
                            lines = text.split('\n')
                        else:
                            words = text.split()
                            current_line = ""
                            
                            for word in words:
                                test_line = f"{current_line} {word}".strip()
                                if font.getlength(test_line) <= max_line_width:
                                    current_line = test_line
                                else:
                                    if current_line:
                                        lines.append(current_line)
                                    current_line = word
                            
                            if current_line:
                                lines.append(current_line)
                        
                        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â—É—é –≤—ã—Å–æ—Ç—É —Ç–µ–∫—Å—Ç–∞
                        total_text_height = 0
                        for line in lines:
                            bbox = draw.textbbox((0, 0), line, font=font)
                            line_height = (bbox[3] - bbox[1]) + LINE_SPACING
                            total_text_height += line_height
                        
                        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ –≤–µ—Ä—Ç–∏–∫–∞–ª–∏
                        start_y = current_y + (cell_height - total_text_height) // 2
                        
                        for line in lines:
                            bbox = draw.textbbox((0, 0), line, font=font)
                            line_height = (bbox[3] - bbox[1]) + LINE_SPACING
                            text_width = font.getlength(line)
                            text_x = current_x + (cell_width - text_width) // 2
                            draw.text((text_x, start_y), line, fill=text_color, font=font)
                            start_y += line_height
                    
                    current_x += cell_width
                current_y += cell_height

        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        table_width, table_height, col_widths, row_heights = calculate_table_size(main_table)
        
        img_width = table_width
        img_height = 50 + table_height + 40  # header + table + legend
        
        img = Image.new('RGB', (img_width, img_height), COLORS['white'])
        draw = ImageDraw.Draw(img)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if header_text:
            header_lines = textwrap.wrap(header_text, width=60)
            for k, line in enumerate(header_lines):
                text_width = font_header.getlength(line)
                draw.text(((img_width - text_width) / 2, 10 + k * 20), line, fill=COLORS['text'], font=font_header)
        
        # –û—Å–Ω–æ–≤–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞
        draw_table(draw, 0, 50, main_table, col_widths, row_heights, cons_sch=cons_sched)
        
        # –õ–µ–≥–µ–Ω–¥–∞ (–ø–æ—è—Å–Ω–µ–Ω–∏—è —Ü–≤–µ—Ç–æ–≤)
        legend_y = 50 + table_height + 10
        legend_x = 10
        if cons_sched:
            for i, (cls, desc) in enumerate(zip(CLASS_COLORS_CONS.keys(), CLASS_DESCRIPTIONS_CONS.values())):
                draw.rectangle([legend_x, legend_y, legend_x+15, legend_y+15], fill=CLASS_COLORS_CONS[cls], outline=COLORS['border'])
                draw.text((legend_x+20, legend_y), desc, fill=COLORS['text'], font=font_regular)
                legend_x += font_regular.getlength(desc) + 40
                if legend_x > img_width - 100 and i < len(CLASS_COLORS_CONS)-1:
                    legend_x = 10
                    legend_y += 20
        else:
            for i, (cls, desc) in enumerate(zip(CLASS_COLORS.keys(), CLASS_DESCRIPTIONS.values())):
                draw.rectangle([legend_x, legend_y, legend_x+15, legend_y+15], fill=CLASS_COLORS[cls], outline=COLORS['border'])
                draw.text((legend_x+20, legend_y), desc, fill=COLORS['text'], font=font_regular)
                legend_x += font_regular.getlength(desc) + 40
                if legend_x > img_width - 100 and i < len(CLASS_COLORS)-1:
                    legend_x = 10
                    legend_y += 20
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –±—É—Ñ–µ—Ä
        img_byte_arr = BytesIO()
        img.save(img_byte_arr, format='PNG', quality=95)
        img_byte_arr.seek(0)
        return img_byte_arr
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞: {str(e)}", exc_info=True)
        return None


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /schedule - –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n"
        "/change_group - –∏–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É"
    )

async def send_schedule(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ..." –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    sent_message = await update.message.reply_text("–ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    img = await get_schedule_image(update.effective_chat.id)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ..."
    try:
        await context.bot.delete_message(chat_id=update.effective_chat.id, 
                                       message_id=sent_message.message_id)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if img:
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=img, reply_markup=markup)
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, 
                                     text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –¢–ò–£")

async def send_schedule_const(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /schedule_const"""
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ..." –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
    sent_message = await update.message.reply_text("–ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    img = await get_schedule_image(update.effective_chat.id, cons_sched=True)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ..."
    try:
        await context.bot.delete_message(chat_id=update.effective_chat.id, 
                                       message_id=sent_message.message_id)
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if img:
        await context.bot.send_photo(chat_id=update.effective_chat.id, photo=img, reply_markup=markup)
    else:
        await context.bot.send_message(chat_id=update.effective_chat.id, 
                                     text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –¢–ò–£")

async def new_member(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É"""
    for member in update.message.new_chat_members:
        if member.id == context.bot.id:
            # –°–æ–∑–¥–∞–µ–º Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
            
            
            await update.message.reply_text(
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ! –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É:\n"
                "1. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≥—Ä—É–ø–ø—É –∫–æ–º–∞–Ω–¥–æ–π /change_group [–Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã]\n"
                "2. –ü–æ–ª—É—á–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥–æ–π /schedule –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ\n"
                "3. –ü–æ–ª—É—á–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∫–æ–º–∞–Ω–¥–æ–π /prep\n\n"
                "–î–ª—è –Ω–∞–∏–ª—É—á—à–µ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –µ–º—É –Ω—É–∂–Ω—ã –∞–¥–º–∏–Ω-–ø—Ä–∞–≤–∞!",
                reply_markup=markup
            )
            break



async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–Ω–æ–ø–∫–∏"""
    if update.message.text == "–ü–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ":
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ..." –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ ID
        sent_message = await update.message.reply_text("–ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        img = await get_schedule_image(update.effective_chat.id)
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–æ–ª—É—á–∞—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ..."
        try:
            await context.bot.delete_message(chat_id=update.effective_chat.id, 
                                           message_id=sent_message.message_id)
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if img:
            await context.bot.send_photo(chat_id=update.effective_chat.id, photo=img, reply_markup=markup)
        else:
            await context.bot.send_message(chat_id=update.effective_chat.id, 
                                         text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, —Å–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –¢–ò–£")

# ========== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ==========
def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    application = Application.builder().token(TOKEN).build()
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã
    conv_handler_group = ConversationHandler(
        entry_points=[CommandHandler("change_group", change_group)],
        states={
            WAITING_FOR_GROUP: [MessageHandler(filters.TEXT & ~filters.COMMAND, receive_group_name)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏
    conv_handler_broadcast = ConversationHandler(
        entry_points=[CommandHandler("broadcast", broadcast_start)],
        states={
            WAITING_FOR_BROADCAST: [MessageHandler(filters.TEXT & ~filters.COMMAND, broadcast_receive)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤
    conv_handler_ticket = ConversationHandler(
        entry_points=[CommandHandler("ticket", ticket_start)],
        states={
            WAITING_FOR_TICKET: [
                MessageHandler(filters.TEXT | filters.PHOTO, ticket_receive)
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    
    # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–æ–≤
    conv_handler_prep = ConversationHandler(
        entry_points=[CommandHandler("prep", prep_start)],
        states={
            WAITING_FOR_PREP: [MessageHandler(filters.TEXT & ~filters.COMMAND, prep_receive)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("schedule", send_schedule))
    application.add_handler(CommandHandler("schedule_const", send_schedule_const))
    application.add_handler(CommandHandler("stats", get_stats))  # –ù–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    application.add_handler(CommandHandler("reply", reply_to_ticket))  # –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–∏–∫–µ—Ç—ã
    application.add_handler(conv_handler_group)
    application.add_handler(conv_handler_broadcast)  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–∞—Å—Å—ã–ª–∫–∏
    application.add_handler(conv_handler_ticket)
    application.add_handler(conv_handler_prep)
    application.add_handler(MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS, new_member))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()